# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build & Test & Publish & Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CSPROJ_FILE_PATH: "./src/GHM.Validator/GHM.Validator.csproj"
  NUPKG_FILE_PATH: "./src/GHM.Validator/bin/Release/*.nupkg"
  PROJECT_NAME: "GHM.Validator"

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
  
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal

  publish:    
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
  
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Create the package
      run: dotnet pack --configuration Release ${{ env.CSPROJ_FILE_PATH }}
        
    - name: Publish the package to nuget.org
      run: dotnet nuget push ${{ env.NUPKG_FILE_PATH }} -k $NUGET_AUTH_TOKEN -s https://api.nuget.org/v3/index.json --skip-duplicate
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.NUGET_KEY }}

    - name: Upload .nupkg Artifact
      uses: actions/upload-artifact@v4
      with:
        name: nupkg-artifact
        path: ${{ env.NUPKG_FILE_PATH }}  # Upload the .nupkg file as an artifact

  release:
    runs-on: ubuntu-latest
    needs: publish
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
  
    - name: Extract Package Version
      run: |
        PACKAGE_VERSION=$(cat ${{ env.CSPROJ_FILE_PATH }} | grep '<Version>' | sed -E 's/.*<Version>(.*)<\/Version>.*/\1/')
        echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
      shell: bash

    - name: Get Last Commit Message
      run: |
        LAST_COMMIT_MESSAGE=$(git log -1 --pretty=%B | jq -Rs .)
        echo "LAST_COMMIT=$LAST_COMMIT_MESSAGE" >> $GITHUB_ENV
      shell: bash
    
    - name: Check if Release Tag Exists
      id: check_release
      run: |
        if gh release view "v${{ env.PACKAGE_VERSION }}" > /dev/null 2>&1; then
          echo "EXISTS_RELEASE=true" >> $GITHUB_ENV
        else
          echo "EXISTS_RELEASE=false" >> $GITHUB_ENV
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      if: env.EXISTS_RELEASE == 'false'
      with:
        tag_name: v${{ env.PACKAGE_VERSION }}
        release_name: Release v${{ env.PACKAGE_VERSION }}
        body: |
          This release includes the latest changes and updates for version v${{ env.PACKAGE_VERSION }}.
          Url to the package => https://www.nuget.org/packages/GHM.Validator/${{ env.PACKAGE_VERSION }}
          
          ------Description------
          ${{ env.LAST_COMMIT }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Download .nupkg Artifact
      uses: actions/download-artifact@v4
      with:
        name: nupkg-artifact
        path: ./nupkg-artifact  # Ensure the artifact is downloaded to this path

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      if: env.EXISTS_RELEASE == 'false'
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}  # Use the upload URL from the create-release step
        asset_path: ./nupkg-artifact/${{ env.PROJECT_NAME }}.${{ env.PACKAGE_VERSION }}.nupkg  # Path to the asset to upload
        asset_name: ${{ env.PROJECT_NAME }}-v${{ env.PACKAGE_VERSION }}.nupkg  # Name of the uploaded asset
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
